// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lib_repositorios.Implementaciones;

#nullable disable

namespace lib_repositorios.Migrations
{
    [DbContext(typeof(Conexion))]
    partial class ConexionModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("lib_dominio.Entidades.Autores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Categorias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Documento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoDocumento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoDocumento");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Estanterias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estanterias");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Libros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Autor")
                        .HasColumnType("int");

                    b.Property<int>("Categoria")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Autor");

                    b.HasIndex("Categoria");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Niveles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Estanteria")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Estanteria");

                    b.ToTable("Niveles");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Niveles_tiene_Libros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Libro")
                        .HasColumnType("int");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Libro");

                    b.HasIndex("Nivel");

                    b.ToTable("Niveles_tiene_Libros");
                });

            modelBuilder.Entity("lib_dominio.Entidades.NumerosDeSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Libro")
                        .HasColumnType("int");

                    b.Property<string>("NumeroSerie")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Libro");

                    b.ToTable("NumerosDeSerie");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Prestamos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cliente")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaEntregado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumeroSerie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cliente");

                    b.HasIndex("NumeroSerie");

                    b.ToTable("Prestamos");
                });

            modelBuilder.Entity("lib_dominio.Entidades.TiposDocumentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCorto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposDocumentos");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Clientes", b =>
                {
                    b.HasOne("lib_dominio.Entidades.TiposDocumentos", "_TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TipoDocumento");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Libros", b =>
                {
                    b.HasOne("lib_dominio.Entidades.Autores", "_Autor")
                        .WithMany()
                        .HasForeignKey("Autor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lib_dominio.Entidades.Categorias", "_Categoria")
                        .WithMany()
                        .HasForeignKey("Categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Autor");

                    b.Navigation("_Categoria");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Niveles", b =>
                {
                    b.HasOne("lib_dominio.Entidades.Estanterias", "_Estanteria")
                        .WithMany()
                        .HasForeignKey("Estanteria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Estanteria");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Niveles_tiene_Libros", b =>
                {
                    b.HasOne("lib_dominio.Entidades.Libros", "_Libro")
                        .WithMany()
                        .HasForeignKey("Libro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lib_dominio.Entidades.Niveles", "_Nivel")
                        .WithMany()
                        .HasForeignKey("Nivel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Libro");

                    b.Navigation("_Nivel");
                });

            modelBuilder.Entity("lib_dominio.Entidades.NumerosDeSerie", b =>
                {
                    b.HasOne("lib_dominio.Entidades.Libros", "_Libro")
                        .WithMany()
                        .HasForeignKey("Libro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Libro");
                });

            modelBuilder.Entity("lib_dominio.Entidades.Prestamos", b =>
                {
                    b.HasOne("lib_dominio.Entidades.Clientes", "_Cliente")
                        .WithMany()
                        .HasForeignKey("Cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lib_dominio.Entidades.NumerosDeSerie", "_NumeroSerie")
                        .WithMany()
                        .HasForeignKey("NumeroSerie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_Cliente");

                    b.Navigation("_NumeroSerie");
                });
#pragma warning restore 612, 618
        }
    }
}
